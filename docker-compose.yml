# magento docker

version: '3'
networks:
    default:
        external:
           name: magento
services:
    mysite_nginx: 
        image: nginx:alpine
        container_name: ${NGINX_CONTAINER}
        restart: always
        volumes:
          - ./html:/var/www/html
          - ./etc/nginx/magento-nginx.conf:/etc/nginx/magento-nginx.conf
          - ./etc/nginx/certs:/etc/nginx/certs
          - ./etc/nginx/conf.d/default.template:/etc/nginx/conf.d/default.template
          - ./etc/nginx/conf.d/proxy-settings.conf:/etc/nginx/conf.d/proxy-settings.conf
          - ./etc/nginx/scripts:/etc/nginx/scripts
        expose:
          - "80"
          - "443"
        environment:
          VIRTUAL_HOST: ${VIRTUAL_HOST}
          VIRTUAL_PROTO: ${VIRTUAL_PROTO}
          VIRTUAL_PORT: ${VIRTUAL_PORT}
          PHP_CONTAINER: ${PHP_CONTAINER}
        depends_on:
          - mysite_php
        command: /bin/sh /etc/nginx/scripts/start-nginx.sh
    mysite_php: 
        image: magento/php${PHP_VERSION}
        container_name: ${PHP_CONTAINER}
        restart: always
        ports: 
          - "${LOCAL_PORT}:9000"
        volumes:
          - ./etc/php/docker-php-ext-xdebug.ini:/usr/local/etc/php/conf.d/docker-php-ext-xdebug.ini
          - ./etc/php/php.ini:/usr/local/etc/php/conf.d/php.ini
          - ./etc/php/www.conf:/usr/local/etc/php-fpm.d/www.conf
          - ./html:/var/www/html:delegated
    varnish:
        image: varnish:stable
        container_name: varnish
        restart: always
        volumes:
          - "./etc/varnish/default.vcl:/etc/varnish/default.vcl"
        ports:
          - "80:80"
        tmpfs:
          - /var/lib/varnish:exec
        environment:
          - VARNISH_SIZE=2G  
        depends_on:
            - mysite_nginx
        command: "-p default_keep=300 -p http_max_hdr=128"
    hitch:
        image: hitch:latest
        container_name: hitch
        restart: always
        volumes:
        - ./etc/hitch/hitch.conf:/etc/hitch/hitch.conf:ro
        - ./etc/nginx/certs:/etc/hitch/certs
        ports:
         - "443:443" 
        depends_on:
          - "varnish"
    php8.1:
        container_name: php8.1
        user: "1000:1000"
        image: magento/php8.1
        build:
            context: ./etc/php
            dockerfile: Dockerfile8.1
        command: echo "Image only, not started by default."
    php7.4:
        container_name: php7.4
        user: "1000:1000"
        image: magento/php7.4
        build:
            context: ./etc/php
            dockerfile: Dockerfile7.4
        command: echo "Image only, not started by default."
    selenium:
        container_name: selenium
        image: selenium/standalone-chrome:4.3.0-20220628
        environment:
          - SE_NODE_MAX_SESSIONS=5
          - SE_NODE_OVERRIDE_MAX_SESSIONS=true
        extra_hosts:
         - "www.mysite.local:172.17.0.1"
        ports:
         - 4444:4444
    mysqldb:
        image: mysql:8.0.28
        cap_add:
            - SYS_NICE
        container_name: mysqldb
        restart: always
        env_file:
            - ".env"
        environment:
            - MYSQL_DATABASE=${MYSQL_DATABASE}
            - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
            - MYSQL_USER=${MYSQL_USER}
            - MYSQL_PASSWORD=${MYSQL_PASSWORD}
            - TZ=${MYSQL_TZ}
        ports:
            - "3306:3306"
        volumes:
            - "./data/db/mysql:/var/lib/mysql"
            - "./etc/mysql/conf.d:/etc/mysql/conf.d"
    redis:
        image: redis:6.2.6
        container_name: redis
        restart: always
        ports:
          - "16379:6379"
        volumes:
            - "./etc/redis/redis.conf:/usr/local/etc/redis.conf"
    redis_fpc:
        image: redis:6.2.6
        container_name: redis_fpc
        restart: always
        ports:
          - "16380:6379"
        volumes:
            - "./etc/redis/redis_fpc.conf:/usr/local/etc/redis.conf"
    redis_session:
        image: redis:6.2.6
        container_name: redis_session
        restart: always
        ports:
          - "16381:6379"
        volumes:
            - "./etc/redis/redis_session.conf:/usr/local/etc/redis.conf"
    mailhog:
        image: mailhog/mailhog:v1.0.0
        container_name: mailhog
        restart: always
        ports:
          - "1025:1025"
          - "8025:8025"
    opensearch:
        image: opensearchproject/opensearch:1.3.3
        container_name: opensearch
        environment:
          - node.name=opensearch
          - bootstrap.memory_lock=true # along with the memlock settings below, disables swapping
          - "OPENSEARCH_JAVA_OPTS=-Xms1g -Xmx1g" # minimum and maximum Java heap size, recommend setting both to 50% of system RAM
          - DISABLE_SECURITY_PLUGIN=true
        ulimits:
          memlock:
            soft: -1
            hard: -1
          nofile:
            soft: 65536
            hard: 65536
        restart: always
        build:
            context: ./etc/opensearch
            dockerfile: Dockerfile
        volumes:
          - "./data/opensearch:/usr/share/opensearch/data"
          - "./etc/opensearch/logs:/usr/share/opensearch/logs"
          - "./etc/opensearch/config/opensearch.yml:/usr/share/opensearch/config/opensearch.yml"
        ports:
          - 19201:9200
          - 9600:9600
    elasticsearch-head:
        image: mobz/elasticsearch-head:5
        container_name: es7-head
        ports:
          - 9100:9100
    rabbitmq:
        environment:
          - RABBITMQ_ERLANG_COOKIE=secret_cookie
          - RABBITMQ_DEFAULT_USER=guest
          - RABBITMQ_DEFAULT_PASS=guest
        container_name: rabbitmq
        hostname: rabbitmq
        image: rabbitmq:3-management-alpine
        restart: always
        ports:
          - 15672:15672
          - 5672:5672
        tty: true
        volumes:
          - ./data/rabbitmq:/var/lib/rabbitmq
          - ./etc/rabbitmq/conf:/etc/rabbitmq/
        command:  bash -c "sleep 10; rabbitmq-server; rabbitmq-plugins enable rabbitmq_management;"
    chrome:
        image: 'browserless/chrome:latest'
        container_name: "chrome"
        restart: always
        ports: 
          - "3000:3000"
        environment:
          VIRTUAL_HOST: ${CHROME_VIRTUAL_HOST}
          VIRTUAL_PROTO: ${CHROME_VIRTUAL_PROTO}
          VIRTUAL_PORT: ${CHROME_VIRTUAL_PORT}